namespace=WWMIv1


; Includes -------------------------

[IncludeUtilities]
include = WWMI-Utilities.ini

[IncludeLegacyTextPrinter]
include = help.ini


; Key Bindings -------------------------

[KeyToggleWWMI]
Key = no_modifiers F6
$enable_mods = 0,1
type = cycle

[KeyToggleCompatibilityMode]
key = ALT F12
run = CommandListToggleCompatibilityMode

[KeyToggleUserGuide]
key = no_modifiers F12
type = cycle
$show_user_guide = 0,1

[KeyToggleHuntingModeGuide]
key = CTRL F12
type = cycle
$show_hunting_mode_guide = 0,1

[KeyHideNotification]
key = X
key = XB_X
run = CommandListHideNotification

[KeyHideFirstRunNotification]
Key = no_modifiers F10
type = cycle
$first_run = 0,1
condition = $first_run == 1


; API -------------------------

; Sets value of custom Shape Key or override value of original one
[CommandListSetShapeKey]
; Input:
; $\WWMIv1\shapekey_id (int, range [0, 127])
; $\WWMIv1\shapekey_value (float, range [0.0, 1.0])
; cs-u5 = ResourceCustomShapeKeyValuesRW
;
; Usage example (set value override for Shape Key 86 to 0.5):
; $\WWMIv1\shapekey_id = 86
; $\WWMIv1\shapekey_value = 0.5
; cs-u5 = ResourceCustomShapeKeyValuesRW
; run = CommandList\WWMIv1\SetShapeKey
$shapekey_mode = 0
run = CustomShaderShapeKeySetter


; Disables value override of original Shape Key
[CommandListDisableShapeKeyOverride]
; Input:
; $\WWMIv1\shapekey_id (int, range [0, 127])
; cs-u5 = ResourceCustomShapeKeyValuesRW
;
; Usage example (disable value override for Shape Key 21):
; $\WWMIv1\shapekey_id = 21
; cs-u5 = ResourceCustomShapeKeyValuesRW
; run = CommandList\WWMIv1\DisableShapeKeyOverride
$shapekey_mode = 1
run = CustomShaderShapeKeySetter


; Prints text on screen using provided params
[CommandListPrintText]
; Input:
; Resource\WWMIv1\Text
; Resource\WWMIv1\TextParams
;
; Usage example (resource formats are listed below):
; Resource\WWMIv1\Text = ref ResourceMyText
; Resource\WWMIv1\TextParams = ref ResourceMyTextParams
; run = CommandList\WWMIv1\PrintText
run = CommandListRenderText

; Text string example resource printable by CommandListPrintText
[ResourceTextExample]
type = Buffer
data = "Hello World!"

; Text file example resource printable by CommandListPrintText
[ResourceTextFileExample]
type = buffer
format = R8_UINT
filename = MyText.txt

; Text params example resource for CommandListPrintText
; Using these parameter buffers as a way to pass in constant parameters without
; taking up any of the IniParams slots while still allowing the parameters to
; be customised on a per-message basis.
[ResourceTextParamsExample]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.95   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

; Registers mod in WWMI and returns $mod_id
; If returned $mod_id == -1, mod must disable all its functions for user safety
[CommandListRegisterMod]
; Dummy method to handle registration
; TODO: Make proper registration system
$mod_id = 1
; Ensure that user had required version of WWMI
if $wwmi_version < $required_wwmi_version
    ResourceErrorIncompatibleVersionRef = ref ResourceErrorOldVersionWWMI
    $mod_id = -1
endif
; Ensure that mod uses supported version of installed WWMI API
if $required_wwmi_version < 0.6
    ResourceErrorIncompatibleVersionRef = ref ResourceErrorOldVersionMod
    $mod_id = -1
; Ensure that mod uses supported version of installed WWMI API
elif $required_wwmi_version < 0.7 && !$enable_compatibility_mode
    ResourceErrorIncompatibleVersionRef = ref ResourceErrorCompatibilityModeDisabled
    $mod_id = -1
endif
; Set mod name for error display if there is version incompatibility
if $mod_id == -1
    if ResourceModName === null
        ResourceModName = ResourceUnnamedModName
    endif
    ResourceErrorIncompatibleVersionModNameRef = copy ResourceModName
endif


; Constants -------------------------

[ResourceModName]
[ResourceModAuthor]
[ResourceModDesc]
[ResourceModLink]
[ResourceModLogo]

[ResourceVersionNotification]
type = Buffer
data = "WWMI 0.8.0 (PRESS F12 TO SHOW GUIDE)"


[Constants]

global $wwmi_version = 0.80

global $enable_ib_callbacks = 0

global $enable_mods = 1

global persist $first_run = 1
global $show_compatibility_mode_notification = 0
global $compatibility_mode_switch_time = 0
global $show_user_guide = 0
global $show_hunting_mode_guide = 0

global $object_guid = 0
global $mod_id = 0
global $required_wwmi_version = 0

global $shapekey_vertex_count = 0
global $shapekey_checksum = 0

global $shapekey_mode = 0
global $shapekey_id = 0
global $shapekey_value = 0

global $vg_offset = 0
global $vg_count = 0

global $custom_vertex_offset = 0
global $custom_vertex_count = 0
global $custom_mesh_scale = 1.0

; Used for text output if autodetection fails
global $window_width = 2560
global $window_height = 1440

; Deprecated
global persist $enable_compatibility_mode = 0
global $enable_vb0_callbacks = 1
global $component_draw_calls_count = 25


; Present -------------------------

[Present]
; pre Resource\Debugger\DebugRW = copy ResourceDebugRW
run = CommandListRenderGUI


; Shape Keys Override -------------------------

; Writes custom shape key values to provided RWBuffer
[CustomShaderShapeKeySetter]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/SkapeKeySetter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_z0 = z0
; Pass variables to the shader
x0 = $shapekey_mode
y0 = $shapekey_id
z0 = $shapekey_value
; Pass resources to the shader
; cs-u7 = ResourceDebugRW
; Run the compute shader
dispatch = 1, 1, 1
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post z0 = $bak_z0

; Updates provided RWBuffer that stores offsets of shapekeyed vertex lists, shape key values and multipliers
[CustomShaderShapeKeyOverrider]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyOverrider.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_checksum = 1415
x0 = $shapekey_checksum
; Pass resources to the shader
; Inputs:
; cs-t33 = ResourceShapeKeyOffsetBuffer
; cs-u5 = ResourceCustomShapeKeyValuesRW
; cs-u6 = ResourceShapeKeyCBRW
; cs-u7 = ResourceDebugRW
; Run the compute shader
Dispatch = 1, 1, 1
; Unbind resources
cs-t33 = null
cs-u5 = null
cs-u6 = null
; Restore IniParams:
post x0 = $bak_x0

; Overides original Shape Key Loader CS call
[ShaderOverrideShapeKeyLoaderCS]
hash = 3222cf3da3006e93
allow_duplicate_hash = true
filter_index = 3381.3333
; Fire callbacks for mods that are listening on cs-u0 slot (shape key data)
if $enable_mods
    if cs-u0 >= 1
        checktextureoverride = cs-u0
    endif
endif

; Loads xyz offsets for each vertex and global shape key multiplier to xyz offsets
[CustomShaderShapeKeyLoader]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyLoader.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
; Inputs:
; cs-t0 = ResourceShapeKeyVertexIdBuffer
; cs-t1 = ResourceShapeKeyVertexOffsetBuffer
; cs-u6 = ResourceShapeKeyCBRW
; cs-u7 = ResourceDebugRW
; Run the compute shader
local $dispatch_y = $shapekey_vertex_count/32+1
if $dispatch_y < THREAD_GROUP_COUNT_Y
    $dispatch_y = THREAD_GROUP_COUNT_Y
endif
dispatch = 1, $dispatch_y, 1
; Unbind resources
cs-u6 = null

; Overides original Shape Key Multiplier CS call
[ShaderOverrideShapeKeyMultiplierCS]
hash = 7a8396180d416117
allow_duplicate_hash = true
filter_index = 3381.4444
; Fire callbacks for mods that are listening on cs-u0 slot (shape key data)
if $enable_mods
    if cs-u0 >= 1
        checktextureoverride = cs-u0
    endif
endif


; Applies dynamic unique per-character shape key multiplier to xyz offsets 
[CustomShaderShapeKeyMultiplier]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyMultiplier.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
; cs-u7 = ResourceDebugRW
; Run the compute shader
local $dispatch_y = $custom_vertex_count/32+1
if $dispatch_y < THREAD_GROUP_COUNT_Y
    $dispatch_y = THREAD_GROUP_COUNT_Y
endif
dispatch = 1, $dispatch_y, 1


; Applies shape key xyz offsets to position buffer data
[CustomShaderShapeKeyApplier]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyApplier.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
local $bak_y0 = y0
; Pass variables
x0 = $custom_vertex_offset
y0 = $custom_vertex_count
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
cs-u7 = ResourceDebugRW
; Run the compute shader
dispatch = $custom_vertex_count/64+1, 1, 1
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0


; Skeleton Override -------------------------

; Hooks to ALL vertex shaders to track required resource updates
[ShaderRegexEnableTextureOverrides]
shader_model = vs_4_0 vs_4_1 vs_5_0 vs_5_1
if $enable_mods
    run = CommandListFireCallbacks
endif

; Fires callbacks for mods that are listening on vb0 slot (draw calls)
[CommandListFireCallbacks]
CheckTextureOverride = vb0
if $enable_ib_callbacks
    CheckTextureOverride = ib
endif
if $enable_compatibility_mode
    CheckTextureOverride = vs-cb3
    CheckTextureOverride = vs-cb4
endif


; Merges bone data from provided buffer into provided merged skeleton buffer
[CustomShaderSkeletonMerger]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/SkeletonMerger.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x1 = x1
local $bak_z1 = z1
local $bak_w1 = w1
; Pass variables
x1 = $custom_mesh_scale
z1 = $vg_offset
w1 = $vg_count
; Pass resources to the shader
; Expects cs-cb0
; Expects bone data resource in cs-t3 or cs-t4
; Expects merged skeleton resource in cs-u6
; cs-u6 = ResourceMergedSkeletonRW
; cs-u7 = ResourceDebugRW
; Run the compute shader
dispatch = $vg_count/64+1, 1, 1
; Restore IniParams:
post x1 = $bak_x1
post z1 = $bak_z1
post w1 = $bak_w1

; Dummy shader to supress errors
[CustomShaderMeshSkinner]
cs = null
vs = null
ps = null
hs = null
ds = null
gs = null


; Resources -------------------------

[ResourceDebugRW]
type = RWBuffer
format = R32G32B32A32_FLOAT
array = 128


; Text Printing -------------------------

[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif


[CommandListRenderText]
; Backup used IniParams
local $bak_x = x
local $bak_y = y
local $bak_w = w
; Pass window size in a fail-safe way
run = CommandListPassWindowInfo
; Pass reported DPI to calculate required scaling
w = effective_dpi
; Calculate positions of all chars
run = CustomShaderFormatText
; Renter formatted text
run = CustomShaderRenderText
; Restore IniParams:
x = $bak_x
y = $bak_y
w = $bak_w


[CustomShaderFormatText]
; The compute shader scans the text and breaks it up into smaller chunks for
; each geometry shader invocation to render (max 64 characters each),
; calculating the position on the screen where each chunk of text is positioned
; wrapping long lines as needed. This is only run when necessary, not every
; frame.
cs = Shaders/TextPrinter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass resources to the shader
cs-t100 = ResourceFont
if ResourceText !== null
	cs-t113 = ResourceText
	cs-t114 = ResourceTextParams
	clear = ResourceTextPosition
	cs-u0 = ResourceTextPosition
    ; Run the compute shader
	dispatch = 1, 1, 1
endif
; Unbind resources
cs-u0 = null
cs-t100 = null
cs-t113 = null
cs-t114 = null


[CustomShaderRenderText]
; The vertex shader passes draw indexes to the geometry shader:
vs = Shaders/TextPrinter.hlsl
; The geometry shader generates the text for a given draw index:
gs = Shaders/TextPrinter.hlsl
; The pixel shader draws the font:
ps = Shaders/TextPrinter.hlsl
hs = null
ds = null
cs = null
; Allows us to use SV_Position.z to pack a texcoord, increasing the character
; limit per geometry shader invocation:
depth_clip_enable = false
; Disable front/back face culling so the vertices can be in any rotation
cull = none
; Enable alpha blending. To change the text colour, edit the pixel shader:
blend = add one inv_src_alpha
; Use points as the primitive from the vertex shader to the geometry shader:
topology = point_list
; Clear all render + depth targets to avoid compatibility issues
run = BuiltInCommandListUnbindAllRenderTargets
; Bind the back buffer as a render target. set_viewport ensures that the view
; port is the size of the buffer so the draw call will work
o0 = set_viewport no_view_cache bb
; Font is passed into the pixel shader (to draw it) *and* the geometry shader
; (as the character sizes are encoded in the final character of the font):
gs-t100 = ResourceFont
ps-t100 = ResourceFont
post gs-t100 = null
post ps-t100 = null
; Pass resources to the shader
gs-t112 = ResourceTextPosition
gs-t113 = ResourceText
gs-t114 = ResourceTextParams
ps-t114 = ResourceTextParams
; Draw vertices
; Change this number to limit how much text may be drawn:
draw = 4096, 0
; Unbind resources
gs-t112 = null
gs-t113 = null
gs-t114 = null
ps-t114 = null
ResourceText = null
ResourceTextParams = null


; Text Printing Resources -------------------------

; These resources hold the currently displayed help text and parameters. When
; ResourceText is null the shader will not be run:
[ResourceText]
[ResourceTextParams]


[ResourceFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = Fonts/LiberationSans-Bold.dds


[ResourceTextPosition]
; A buffer passed from the formatting compute shader to the geometry shader,
; indicating which shader invocation draws which text at what position.
type = StructuredBuffer
stride = 16
array = 4096


; GUI -------------------------

[CommandListRenderGUI]

if time < 30
    ResourceText = ref ResourceVersionNotification
    ResourceTextParams = ref ResourceVersionNotificationParams
    run = CommandListPrintText
    if $first_run
        $show_user_guide = 1
    endif
endif

if $show_user_guide
    ResourceText = ref ResourceUserGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if $show_hunting_mode_guide
    ResourceText = ref ResourceHuntingModeGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if ResourceErrorIncompatibleVersionModNameRef !== null
    ResourceText = ref ResourceErrorIncompatibleVersionRef
    ResourceTextParams = ref ResourceUserNotificationParams
    run = CommandListPrintText

    ResourceText = ref ResourceErrorIncompatibleVersionModNameRef
    ResourceTextParams = ref ResourceErrorIncompatibleVersionModNameParams
    run = CommandListPrintText
endif

if $compatibility_mode_switch_time != 0
    if $enable_compatibility_mode
        ResourceText = ref ResourceCompatibilityModeEnabled
    else
        ResourceText = ref ResourceCompatibilityModeDisabled
    endif
    ResourceTextParams = ResourceTopNotificationParams
    run = CommandListPrintText
    if time - $compatibility_mode_switch_time > 3
        $compatibility_mode_switch_time = 0
    endif
endif


[CommandListHideNotification]
ResourceErrorIncompatibleVersionModNameRef = null


[CommandListToggleCompatibilityMode]
$enable_compatibility_mode = !$enable_compatibility_mode
$compatibility_mode_switch_time = time


; GUI Resources -------------------------

[ResourceCompatibilityModeEnabled]
type = Buffer
data = "Compatibility Mode: Enabled"


[ResourceCompatibilityModeDisabled]
type = Buffer
data = "Compatibility Mode: Disabled"


[ResourceUserGuide]
type = buffer
format = R8_UINT
filename = Notifications/UserGuide.md


[ResourceHuntingModeGuide]
type = buffer
format = R8_UINT
filename = Notifications/HuntingModeGuide.md


[ResourceErrorOldVersionMod]
type = buffer
format = R8_UINT
filename = Notifications/ErrorOldVersionMod.md


[ResourceErrorCompatibilityModeDisabled]
type = buffer
format = R8_UINT
filename = Notifications/ErrorCompatibilityModeDisabled.md


[ResourceErrorOldVersionWWMI]
type = buffer
format = R8_UINT
filename = Notifications/ErrorOldVersionWWMI.md


[ResourceErrorIncompatibleVersionRef]
[ResourceErrorIncompatibleVersionModNameRef]


[ResourceUnnamedModName]
type = Buffer
data = "< Unnamed Mod >"


[ResourceTopNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.90 +0.25 +0.80   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceUserNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

[ResourceErrorIncompatibleVersionModNameParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceVersionNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.95 -0.90 -0.00 -0.85   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   1 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceUserGuideParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.40 +0.00 +0.40 -0.00   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 2   0   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

; EoF -------------------------
